#+hugo_base_dir: ./
#+hugo_weight: auto
#+hugo_front_matter_key_replace: description>summary
#+author: James Hood-Smith

* About
:PROPERTIES:
:EXPORT_HUGO_SECTION: /
:EXPORT_FILE_NAME: about
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :layout "about"
:END:
I am a computer scientist and software developer working in and around London.
The intended audience for this blog is for the most part my future self, with
the posts serving as reminders for how to get things done. That said, if you
find anything here useful, feel I've got something wrong or just want to talk
shop, then please feel free to [[https://github.com/jhoodsmith][contact me]].
* Blogging                                           :@blogging:
** DONE Hugo blog with Org and GitHub Actions                      :hugo:org:
:PROPERTIES:
:EXPORT_FILE_NAME: creating-hugo-blog-post
:EXPORT_DATE: 2021-02-05
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true
:END:

#+begin_description
In which I setup a working environment for writing a Hugo blog in Org with
automatic deployment using GitHub Actions.
#+end_description

*** Motivation
Like many dyed-in-the-wool Emacs users, I use [[https://orgmode.org][Org Mode]] for much of my writing. I
want a blog that I can deploy and write posts for in Org with minimum fuss.
Having heard good things about it, I want to give [[https://gohugo.io][Hugo]] a try. I also want to
have automatic deployment with [[https://github.com/features/actions][GitHub Actions]].

*** Steps
**** Installation
1. Install Hugo:
   #+BEGIN_SRC shell
     brew install hugo
   #+END_SRC

2. Setup [[https://ox-hugo.scripter.co][ox-hugo]], the Org exporter backend that exports Org to Hugo-compatible
   Markdown.

   In my case, I use [[https://github.com/jwiegley/use-package][use-package]], and so add the following to =init.el=.
   #+BEGIN_SRC elisp
     (use-package ox-hugo)
   #+END_SRC

**** Setup blog with first post
1. Create new site:
   #+BEGIN_SRC shell
     hugo new site blog
   #+END_SRC

2. Configure Emacs to automatically create markdown files after saving the org source:

   This is accomplished by adding the following Emacs Lisp expression to
   =.dir-locals.el= in the project root.
   #+BEGIN_SRC elisp
     ((org-mode . ((eval . (org-hugo-auto-export-mode)))))
   #+END_SRC

4. Add a nice theme as a git sub-module (I'm using [[https://github.com/matsuyoshi30/harbor][Harbor]]).
   #+BEGIN_SRC shell
     cd themes/
     git submodule add https://github.com/alexandrevicenzi/harbor.git
   #+END_SRC
   I want to use my blog straight away---hence my use of someone else's theme.
   In a subsequent post I look at creating a new theme from scratch, but for the
   time being I use Harbor with its default settings, hence I copy the
   configuration from the theme's [[https://themes.gohugo.io/harbor/][home page in Hugo Themes]] to =config.toml=.

5. Add =blog.org= to the root of the blog directory and create your first blog post
   #+BEGIN_SRC org
     ,#+hugo_base_dir: ./
     ,#+hugo_weight: auto
     ,#+author: James Hood-Smith

     ,* Blogging                                                        :@blogging:
     All posts in here will have the category set to /blogging/.
     ,** DONE Hugo blog with Org and GitHub Actions                      :hugo:org:
     :PROPERTIES:
     :EXPORT_FILE_NAME: creating-hugo-blog-post
     :EXPORT_DATE: 2021-02-03
     :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true
     :END:

     ,#+begin_description
     In which I setup a working environment for writing a Hugo blog in Org with
     automatic deployment using GitHub Actions.
     ,#+end_description

     ,*** Motivation
     Like many dyed-in-the-wool Emacs users, I use [[https://orgmode.org][Org Mode]] ...
   #+END_SRC

   To ensure things are working well run the Hugo development server
   #+BEGIN_SRC shell
     hugo server -D --navigateToChanged
   #+END_SRC
   View the blog at =http://localhost:1313=.
**** Making change to theme
***** Overwriting the Hugo .Summary page variable
Notice in the blog post source above that I made use of the Org meta data
=Description= variable. I would like this to be used in place of the Hugo page
variable =.Summary=.  To achive this I need to add the following to the top of my
Org source

#+BEGIN_SRC markdown
  ,#+hugo_front_matter_key_replace: description>summary
#+END_SRC
As explained [[https://ox-hugo.scripter.co/doc/replace-front-matter-keys/][here]], this swaps the Hugo front-matter variable with the Org meta
data variable.
***** Modifying theme layout file
To change an aspect of a Hugo theme, it's just a matter of creating a file with
the same name and directory structure as the layout file you want to replace. In
my case, I want to modify part of =/themes/harbor/layouts/partials/toc.html=,
which is where the theme author inserts the page variable =.Content=. Hence, I
copy the file to =/layouts/partials/toc.html=.

In the copy of =toc.html=, I then replace ={{ .Content }}= with the following.
#+BEGIN_SRC html
  {{ if eq .Type "posts" }}
  <div class="summary">
    {{ .Summary }}
  </div>
  {{ end }}
  {{ .Content }}
#+END_SRC
This ensures that all content files of type "posts" will have their content
prefaced with the value of =.Summary=. Following the theme author's
instructions, I have added my custom CSS to =/static/css/custom.css=.
**** Automatic deployment to GitHub pages
1. Go to GitHub and create a repository for the source code and a repository for
   the deployed site. In my case the repositories are =blog-source= and
   =jhoodsmith.github.io=.

2. Add a basic =.gitignore= file to the blog directory root
   #+BEGIN_SRC text
     # Hugo default output directory
     /public

     ## OS Files
     # Windows
     Thumbs.db
     ehthumbs.db
     Desktop.ini
     $RECYCLE.BIN/

     # OSX
     .DS_Store
   #+END_SRC

3. Update the =baseurl= property in =config.toml= to the URL of the blog.
   #+BEGIN_SRC toml
     baseurl = "https://jhoodsmith.github.io/"
   #+END_SRC

4. In your account settings in GitHub, create a new personal access token (PAT)
   with read and write access to your repositories. (Skip this step if you
   already have a suitable PAT).

5. Store the PAT in the =Secrets= setting of the =blog-source= repository with
   key name =PERSONAL_TOKEN=.

7. Create a new GitHub Actions workflow in =.github/workflows/deploy.yml=
   #+BEGIN_SRC yaml
     name: hugo CI

     on:
       push:
	 branches: [ main ]

	 jobs:
	   build:
	     runs-on: ubuntu-latest
	     steps:
	       - uses: actions/checkout@v2
		 with:
		   submodules: true
		   fetch-depth: 1   

		   - name: Setup Hugo
		     uses: peaceiris/actions-hugo@v2
		     with:
		       hugo-version: 'latest'

		       - name: Build
			 run: hugo --minify

			 - name: Deploy
			   uses: peaceiris/actions-gh-pages@v3
			   with:
			     personal_token: ${{ secrets.PERSONAL_TOKEN }}
			     external_repository: jhoodsmith/jhoodsmith.github.io
			     publish_branch: main
			     publish_dir: ./public
   #+END_SRC

If all has gone well, then the blog should automatically be deployed to your
GitHub pages site each time you push to the =main= branch of =blog-source=.
** DONE Creating custom Hugo theme with Tailwind CSS   :hugo:org:tailwindcss:
:PROPERTIES:
:EXPORT_FILE_NAME: custom-theme-with-tailwindcss
:EXPORT_DATE: 2021-02-20
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true
:END:

#+begin_description
In which I create a new Hugo theme using Tailwind CSS and Hugo Pipes, and upgrade
my GitHub Actions workflow to use NPM.
#+end_description

*** Motivation
In my [[Hugo blog with Org and GitHub Actions][previous post]] I created a blog using [[https://gohugo.io][Hugo]] with post creation done in
[[https://orgmode.org][Org Mode]]. I used a theme from another developer, but now I want to create
something of my own. I want to use [[https://tailwindcss.com][Tailwind CSS]], which I currently use for
other projects.
*** Install Tailwind CSS

In the blog's root directory, instruct Hugo to create a new, blank theme
template and install the relevant npm packages.
#+BEGIN_SRC shell
  hugo new theme jhs-tailwindcss
  npm init
  npm install --save-dev autoprefixer postcss postcss-cli postcss-import tailwindcss
#+END_SRC

Next, edit =config.toml= to set the site's theme to be the one just created and
set it up for working with CSS post processing.
#+BEGIN_SRC toml
  # ...
  theme = "jhs-tailwindcss"
  # ...
  [build]
  writeStats = true
#+END_SRC

I will use Hugo Pipes to process the CSS files with [[https://postcss.org][PostCSS]]. The configuration
for this is in =themes/jhs-tailwindtheme/assets/css/postcss.config.js=, so
open it up and add the following:
#+BEGIN_SRC js
  const themeDir = __dirname + '/../../';

  const purgecss = require('@fullhuman/postcss-purgecss')({
      // see https://gohugo.io/hugo-pipes/postprocess/#css-purging-with-postcss
      // and https://github.com/dirkolbrich/hugo-theme-tailwindcss-starter
      content: [
	  './hugo_stats.json',
	  themeDir + '/hugo_stats.json'
      ],
      defaultExtractor: (content) => {
	  let els = JSON.parse(content).htmlElements;
	  return els.tags.concat(els.classes, els.ids);
      }
  })

  module.exports = {    
      plugins: [        
	  require('postcss-import')({
	      path: [themeDir]
	  }), 
	  require('tailwindcss')(themeDir + 'assets/css/tailwind.config.js'),
	  require('autoprefixer')({
	      path: [themeDir]
	  }),
	  ...(process.env.HUGO_ENVIRONMENT === 'production' ? [purgecss] : [])
      ]
  }
#+END_SRC

Next create a minimal Tailwind CSS configuration in
=themes/jhs-tailwindcss/assets/css/tailwind.config.js=
#+BEGIN_SRC js
  module.exports = {
      theme: {
	  extend: {}
      },
      variants: {},
      plugins: []
  }
#+END_SRC

Then in =themes/jhs-tailwindcss/assets/css/styles.scss= add tailwind's =base=,
=components= and =utilities= styles.
#+BEGIN_SRC scss
  @import "node_modules/tailwindcss/base";
  @import "node_modules/tailwindcss/components";
  @import "node_modules/tailwindcss/utilities";
#+END_SRC

We'll now set up Hugo Pipes. This is done in =themes/jhs-tailwind/layouts/partials/head.html=
#+BEGIN_SRC html
  ...
  {{ $styles := resources.Get "css/styles.scss" | toCSS | postCSS (dict "config" "./assets/css/postcss.config.js") }}
  {{ if .Site.IsServer }}
  <link rel="stylesheet" href="{{ $styles.RelPermalink }}">
  {{ else }}
  {{ $styles := $styles | minify | fingerprint | resources.PostProcess }}
  <link rel="stylesheet" href="{{ $styles.Permalink }}" integrity="{{ $styles.Data.Integrity }}">
  {{ end }}
#+END_SRC

At this point, the Tailwind CSS setup is complete, so we can use Tailwind CSS
classes in the layout files of our new Hugo theme. See the blog's [[https://github.com/jhoodsmith/blog-source][repo]] for full
details of the Tailwind CSS classes I used for the theme.

*** Tailwind Typography and Org Export
The [[https://github.com/tailwindlabs/tailwindcss-typography][Tailwind Typography]] plugin provides good typographic styling for unstyled HTML,
and so is perfect for a blog whose content is exported from Org Mode.

Start by installing the plugin's npm package:
#+BEGIN_SRC shell
  npm install @tailwindcss/typography
#+END_SRC

To customise the plugin's default look-and-full, you need to edit
=themes/jhs-tailwindcss/assets/css/tailwind.config.js=, and specify changes
using [[https://tailwindcss.com/docs/plugins#css-in-js-syntax][CSS-in-JS]] syntax.

This blog has various edits to =tailwind.config.js=, but the following are the
important ones needed to make the exported Org Mode code blocks look right.
#+BEGIN_SRC js
  module.exports = {
      theme: {
	  extend: {
	      typography: {
		  DEFAULT: {
		      css: {
			  color: '#9CA3AF',
			  code: {
			      color: '#E5E7EB',
			      backgroundColor: '#374151',
			      borderRadius: '4px',
			      padding: '2px 3px'
			  },
			  'code::before': {
			      display: 'none'
			  },
			  'code::after': {
			      display: 'none'
			  },
			  // ...
		      },
		  },
	      }
	  },
      },
      plugins: [
	  require('@tailwindcss/typography'),
      ]
  }

#+END_SRC

It should be noted that I also add the following to =styles.scss=.

#+BEGIN_SRC scss
  pre {
      background-color: #374151 !important;
  }
#+END_SRC

Again, see the blog's [[https://github.com/jhoodsmith/blog-source][repo]] for full details.

*** Font Awesome

You don't need to install Font Awesome using npm. However, I expect I will need
additional JavaScript libraries in future, so want a good JS bundler setup.

Start by installing the Font Awesome package:
#+BEGIN_SRC shell
  npm install --save @fortawesome/fontawesome-free
#+END_SRC

Then add the following to =themes/jhs-tailwind/assets/js/index.js=
#+BEGIN_SRC js
  import '@fortawesome/fontawesome-free/js/fontawesome'
  import '@fortawesome/fontawesome-free/js/solid'
#+END_SRC

The Hugo Pipes work is, again, done in =themes/jhs-tailwind/layouts/partials/head.html=:
#+BEGIN_SRC html
  {{- $scripts := resources.Get "js/index.js" | js.Build | minify | fingerprint }}
  <script type="text/javascript" src = '{{ $scripts.RelPermalink }}'></script>
#+END_SRC

*** Extending GitHub Actions Workflow
The following is my complete GitHub Actions workflow, found in
=.github/workflows/deploy.yml=. After I push the to the =main= branch, the
workflow will install dependencies using npm and then build the site using Hugo.
#+BEGIN_SRC yaml
  name: hugo CI

  on:
    push:
      branches: [ main ]

      jobs:
	build:
	  runs-on: ubuntu-latest
	  steps:
	    - uses: actions/checkout@v2
	      with:
		submodules: true 
		fetch-depth: 1   

		- name: Setup Hugo
		  uses: peaceiris/actions-hugo@v2
		  with:
		    hugo-version: 'latest'
		    extended: true

		    - name: Setup Node
		      uses: actions/setup-node@v1
		      with:
			node-version: '12.x'

			- name: Cache dependencies
			  uses: actions/cache@v1
			  with:
			    path: ~/.npm
			    key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
			    restore-keys: |
			      ${{ runner.os }}-node-

			      - run: npm ci
				- run: hugo --minify

				  - name: Deploy
				    uses: peaceiris/actions-gh-pages@v3
				    with:
				      personal_token: ${{ secrets.PERSONAL_TOKEN }}
				      external_repository: jhoodsmith/jhoodsmith.github.io
				      publish_branch: main
				      publish_dir: ./public
#+END_SRC

* General                                            :@general:
** DONE Starting from scratch
:PROPERTIES:
:EXPORT_FILE_NAME: starting-from-scratch
:EXPORT_DATE: 2021-05-15
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true
:END:

#+begin_description
In which I describe the starter projects for the languages and frameworks I work
with. These currently comprise Ruby (non Rails), Ruby on Rails, Python and Hugo
#+end_description

*** Motiviation
"How do I start this again?" I often ask myself this when I start a new project.
What are the external libraries I need? What tools do I need for test-driven
development? How do I get things to play nice with my [[https://github.com/jhoodsmith/.emacs.d][Emacs configuration]]?

*** Ruby GEM with simple CLI (non Rails)
Create directory structure
#+BEGIN_SRC shell
bundler gem --exe --test=rspec --ci=github my_app
#+END_SRC
This will create a new directory called =my_app= containing a skeleton directory
structure for a new project.

Next you will need to update the =.gemspec= file located in the root of the
directory. It is especially important to update any field whose value starts
with "TODO", otherwise the Gem will not build.

Add =pry= and =pry-byebug= to =Gemfile= and uncomment the two lines in
=/bin/console= that refer to Pry.

*** Simple Ruby program (not a Gem)
Create project directory
#+BEGIN_SRC shell
  mkdir new-project-name
  cd new-project-name
  mkdir lib
#+END_SRC

Initialise =Gemfile= with RSpec
#+begin_src ruby
  source 'https://rubygems.org'

  gem 'rspec'
#+end_src

Next run =bundle= with added bin directory
#+begin_src shell
  gem bundle install --binstubs
#+end_src

And setup RSpec

#+begin_src shell
  bin/rpsec --init
#+end_src

Create your files in =lib=, as this directory is automatically added to the Ruby
=LOAD_PATH= when running RSpec.

*** Python
Assuming [[https://github.com/pyenv/pyenv][pyenv]] is installed, remind yourself of what versions are available on
the local system
#+BEGIN_SRC shell
  pyenv versions
#+END_SRC
Create a new virtual environment for the your chosen python version
#+BEGIN_SRC shell
  pyenv virtualenv 3.7.5 new-project-name
#+END_SRC
Create project directory
#+BEGIN_SRC shell
  mkdir new-project-name
  cd new-project-name
#+END_SRC
Create =.python-version=
#+BEGIN_SRC shell
  echo new-project-name > .python-version
#+END_SRC
Specifiy development dependencies in =requirements.txt=
#+BEGIN_SRC text
  ###### Working environment ######
  ipython
  pytest
  python-language-server[all]

  ###### Frequently used ######
  numpy
  pandas
  requests
  scikit-learn
  scipy
#+END_SRC
Install packages
#+BEGIN_SRC shell
  pip install -r requirements.txt
#+END_SRC
Add an appropriate =.gitignore= file from [[https://gitignore.io]]
*** Ruby on Rails 6
The assumption here is that there will be a [[https://www.postgresql.org][PostgreSQL]] database, and that [[https://github.com/heartcombo/devise][Devise]]
will be used for authentication.
#+BEGIN_SRC shell
  rails new -d postgresql new-project
#+END_SRC

#+BEGIN_SRC ruby
  # ...
  group :development, :test do
    # ...
    gem 'factory_bot_rails'
    gem 'pry-byebug'
    gem 'pry-doc'
    gem 'rspec-rails'
    gem 'rails-controller-testing'
    gem 'solargraph'
  end

  group :development do
    gem 'rubocop-rails'
  end

  gem 'devise'
  gem 'devise_invitable'
  gem 'tailwindcss-rails'
#+END_SRC


#+BEGIN_SRC shell
  yarn add @fortawesome/fontawesome-free
#+END_SRC

Add to =app/javascript/packs/application.js=
#+BEGIN_SRC js
  import "@fortawesome/fontawesome-free/css/all"
#+END_SRC

#+BEGIN_SRC shell
  rails tailwindcss:install
  rails db:create
  rails g devise:install
  rails g devise_invitable User
  rails g devise:views
  rails g rspec:install
#+END_SRC

To make Devise happy add the following to =config/environments/development.rb=
#+begin_src ruby
  config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }
#+end_src

*** Hugo
#+BEGIN_SRC shell
  hugo new site new-project
#+END_SRC
I'll assume we are using PostCSS as our preprocessor. In this case, we need to
execute the following from within project directory.
#+BEGIN_SRC shell
  # this can be skipped if we are not using tailwindcss
  npm init
  npm install --save-dev autoprefixer postcss postcss-cli postcss-import tailwindcss
#+END_SRC
In =/assets/css/postcss.config.js=
#+BEGIN_SRC js
  const purgecss = require('@fullhuman/postcss-purgecss')({
      content: [ './hugo_stats.json' ],
      defaultExtractor: (content) => {
	  let els = JSON.parse(content).htmlElements;
	  return els.tags.concat(els.classes, els.ids);
      }
  });

  module.exports = {
      plugins: [
	  require('postcss-import')({
	      path: ["assets/css"]
	  }),
	  require('tailwindcss')('assets/css/tailwind.config.js'),
	  require('autoprefixer'),
	  ...(process.env.HUGO_ENVIRONMENT === 'production' ? [ purgecss ] : [])
      ]
  };
#+END_SRC

In =/assets/css/main.scss=
#+BEGIN_SRC scss
  @import "node_modules/tailwindcss/base";
  @import "node_modules/tailwindcss/components";
  @import "node_modules/tailwindcss/utilities";
#+END_SRC

In =/config.toml=
#+BEGIN_SRC toml
  baseURL = "https://www.example.co.uk"
  languageCode = "en-gb"
  title = "New Web Site"

  [build]
  writeStats = true
#+END_SRC


#+BEGIN_SRC shell
  npx tailwindcss init
  mv tailwind.config.js assets/css
#+END_SRC


#+BEGIN_SRC shell
  npm install --save @fortawesome/fontawesome-free alpinejs
#+END_SRC

Then add the following to =/assets/js/index.js=
#+BEGIN_SRC js
  import '@fortawesome/fontawesome-free/js/fontawesome'
  import '@fortawesome/fontawesome-free/js/solid'

  import 'alpinejs'
#+END_SRC

In =/layouts/_default/baseof.html=:
#+BEGIN_SRC html
  <!DOCTYPE html>
  <html lang="en-gb">
    {{- partial "head.html" . -}}
    <body>
      {{- partial "header.html" . -}}
      {{- block "main" . }}{{- end }}
      {{- partial "footer.html" . -}}
    </body>
  </html>
#+END_SRC

In =/layouts/partials/head.html=:
#+BEGIN_SRC html
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{{ .Site.Title -}}</title>

    <meta name="description" content="">
    <meta name="robots" content="index,follow">
    <meta name="googlebot" content="index,follow">
    <meta name="google" content="nositelinkssearchbox">

    {{ $styles := resources.Get "css/main.scss" | toCSS | postCSS (dict "config" "./assets/css/postcss.config.js") }}
    {{ if .Site.IsServer }}
    <link rel="stylesheet" href="{{ $styles.RelPermalink }}">
    {{ else }}
    {{ $styles := $styles | minify | fingerprint | resources.PostProcess  }}
    <link rel="stylesheet" href="{{ $styles.RelPermalink }}">
    {{ end }}

    {{- $scripts := resources.Get "js/index.js" | js.Build | minify | fingerprint }}
    <script type="text/javascript" src ="{{ $scripts.RelPermalink }}"></script>
  </head>
#+END_SRC

Create blank =/layouts/index.html=

#+BEGIN_SRC html
  {{ define "main" }}
  Hello World
  {{ end }}
#+END_SRC


Finally, create empty header and footer

#+BEGIN_SRC shell
  touch layouts/partials/footer.html
  touch layouts/partials/header.html
#+END_SRC


